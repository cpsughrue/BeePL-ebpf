clang -emit-llvm -S -O0 struct.c -o struct.ll

#include <stdint.h>

typedef struct {
  int8_t data;
} box_t;

box_t box;

int8_t foo(box_t bar) {
  return bar.data;
}




%struct.box_t = type { i8 }

@box = dso_local global %struct.box_t zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @foo(i8 %0) #0 {
  %2 = alloca %struct.box_t, align 1
  %3 = getelementptr inbounds %struct.box_t, ptr %2, i32 0, i32 0
  store i8 %0, ptr %3, align 1
  %4 = getelementptr inbounds %struct.box_t, ptr %2, i32 0, i32 0
  %5 = load i8, ptr %4, align 1
  ret i8 %5
}




clang -emit-llvm -S -O0 struct.c -o struct.ll

#include <stdint.h>

typedef struct {
  int8_t data1;
  int8_t data2;
} box_t;

box_t box;

int8_t foo(box_t bar) {
  return bar.data1;
}





%struct.box_t = type { i8, i8 }

@box = dso_local global %struct.box_t zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @foo(i16 %0) #0 {
  %2 = alloca %struct.box_t, align 1
  store i16 %0, ptr %2, align 1
  %3 = getelementptr inbounds %struct.box_t, ptr %2, i32 0, i32 0
  %4 = load i8, ptr %3, align 1
  ret i8 %4
}


when the struct surpases 128 bytes

%struct.box_t = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }

@box = dso_local global %struct.box_t zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @foo(ptr noundef byval(%struct.box_t) align 8 %0) #0 {
  %2 = getelementptr inbounds %struct.box_t, ptr %0, i32 0, i32 0
  %3 = load i8, ptr %2, align 8
  ret i8 %3
}











